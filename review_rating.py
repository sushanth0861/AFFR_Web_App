import streamlit as st
import pickle
from tensorflow.keras.models import load_model
from itertools import islice
# from tensorflow.compat.v1 import ConfigProto
# from tensorflow.compat.v1 import InteractiveSession
# config = ConfigProto()
# config.gpu_options.allow_growth = True
# session = InteractiveSession(config=config)
def prep(message):
	preprocessed_reviews=[message]
	vocab=set()
	for review in preprocessed_reviews:
	    for each_word in review.split(' '):
	        if each_word not in vocab:
	            vocab.add(each_word)

	vocab=list(vocab)
	all_words=len(vocab)

	vocab_count=dict.fromkeys(vocab,0)
	for review in preprocessed_reviews:
	    for word in review.split():
	        vocab_count[word]+=1

	counts=dict()
	for key_value_pair in sorted(vocab_count,key=vocab_count.get,reverse=True):
	    counts[key_value_pair]=vocab_count[key_value_pair]
	    
	with_index=list(islice(counts.items(),len(counts)))
	with_index=[list(i) for i in with_index]

	index=0
	for i in with_index:
	    with_index[with_index.index(i)].append(with_index.index(i)+1)

	with_index[0]

	words=[i[0] for i in with_index]
	sorted_index=[i[2] for i in with_index]
	words_and_index=dict(zip(words,sorted_index))

	new_preprocessed_reviews=[]
	for sentance in preprocessed_reviews:
	    each_review=[]
	    for word in sentance.split(' '):
	        each_review.append(words_and_index[word])
	    new_preprocessed_reviews.append(each_review)
	print(new_preprocessed_reviews)
	return new_preprocessed_reviews

def predict(message):
	model=load_model('/home/sushanth/Desktop/AFFR_Web_app/review_rating.h5',compile = False)
	predictions = model.predict(prep(message))
	return predictions

# st.title("Review Sentiment Analyzer")
st.markdown("<h2 style='text-align: center; color: #475496;'>Review Sentiment Analyzer</h2>", unsafe_allow_html=True)
message = st.text_area("Enter Review")
if st.button("Analyze"):
	with st.spinner("Analyzing the text â€¦"):
		prediction=predict(message)
		prediction=prediction[0][0]
		print(prediction)
		if prediction > 0.8:
			st.success("Positive review with {:.2f} confidence".format(prediction))
			st.balloons()
		elif prediction <0.8:
			st.error("Negative review with {:.2f} confidence".format(1-prediction))
		else:
			st.warning("Not sure! Try to add some more words")

st.markdown("<h4 style='text-align: left; color: #475496;'>Results generated by LSTM model trained on Amazon fine food reviews.</h4>", unsafe_allow_html=True)